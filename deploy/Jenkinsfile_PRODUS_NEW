pipeline {
  agent { label 'Tableau-Schema-Migration-Node' }

  environment {
    AWS_REGION = 'us-east-1'
    ACCOUNT_ID = '180350466832'
    REPO_NAME  = 'tableau-schema-migration'
    REGISTRY   = "${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    ECR_IMAGE  = "${REGISTRY}/${REPO_NAME}:latest"   // or use a commit tag you pushed
  }

  options { timestamps() }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Login to ECR & Pull Image') {
      steps {
        sh '''
          set -e
          aws ecr get-login-password --region "$AWS_REGION" \
            | docker login --username AWS --password-stdin "$REGISTRY"
          docker pull "$ECR_IMAGE"
        '''
      }
    }

    stage('Run inside ECR image') {
  steps {
    script {
      docker.image(env.ECR_IMAGE).inside('-u 0:0') {
        withCredentials([
          string(credentialsId: 'AWS_ACCESS_KEY_ID',     variable: 'AWS_ACCESS_KEY_ID'),
          string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
          string(credentialsId: 'AWS_SESSION_TOKEN',     variable: 'AWS_SESSION_TOKEN')
        ]) {
          sh '''
            set -euo pipefail

            export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
            export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
            export AWS_SESSION_TOKEN="$AWS_SESSION_TOKEN"
            export AWS_DEFAULT_REGION="$AWS_REGION"

            echo "Workspace in container: $(pwd)"
            ls -la

            # sanity check: script must be at repo root
            test -f run_all_json_in_folders.py || { 
              echo "ERROR: run_all_json_in_folders.py not found at repo root."; 
              exit 1; 
            }

            # install awscli if your image doesn't have it
            command -v aws >/dev/null 2>&1 || pip install --no-cache-dir awscli

            echo "Running: python3 run_all_json_in_folders.py"
            python3 run_all_json_in_folder.py
            echo "Python script completed successfully"
          '''
        }
      }
    }
  }
}
  }

  post {
    always {
      echo 'Pipeline finished.'
    }
    failure {
      echo 'Deployment failed!'
    }
  }
}
