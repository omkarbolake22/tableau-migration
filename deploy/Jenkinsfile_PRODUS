pipeline {
  agent any
  options { timestamps() }

  environment {
    AWS_REGION = 'us-east-1'
    LOCAL_BIN  = "${env.HOME}/.local/bin"
    PATH       = "${env.LOCAL_BIN}:${env.PATH}"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Setup awscli (user-space)') {
      steps {
        sh '''
          set -euxo pipefail
          # make sure pip exists, then install awscli for the current user
          python3 -m ensurepip --upgrade || true
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user --upgrade awscli
          aws --version
        '''
      }
    }

    stage('Run All JSONs with AWS Credentials') {
      steps {
        sh(label: "Revealv2 USPROD - Deployment", script: '''
          set -euxo pipefail

          # sanity checks
          which aws
          python3 --version

          assume_role() {
            local ROLE_ARN="$1"; local SESSION_NAME="$2"
            local creds
            creds=$(aws sts assume-role \
              --role-arn "$ROLE_ARN" \
              --role-session-name "$SESSION_NAME" \
              --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
              --output text)

            export AWS_ACCESS_KEY_ID=$(echo "$creds" | awk '{print $1}')
            export AWS_SECRET_ACCESS_KEY=$(echo "$creds" | awk '{print $2}')
            export AWS_SESSION_TOKEN=$(echo "$creds" | awk '{print $3}')
          }

          assume_role "arn:aws:iam::889340682220:role/revealv2-tableau-usprod-deployment-role" "USPROD-Revealv2-Tableau-Jenkins-DeployRole"

          echo "Current directory: $(pwd)"

          # run and capture output
          set +e
          python3 run_all_json_in_folder.py | tee output.log
          EXIT_CODE=${PIPESTATUS[0]}
          set -e

          if [ $EXIT_CODE -ne 0 ]; then
            echo "Python script failed with exit code $EXIT_CODE"
            tail -n 20 output.log || true
            exit $EXIT_CODE
          else
            echo "Python script completed successfully"
          fi
        ''')
      }
    }
  }

  post {
    always  { echo 'Pipeline finished.' }
    failure { echo 'Deployment failed!' }
  }
}
