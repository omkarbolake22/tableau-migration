pipeline {
  agent any
  options { timestamps() }

  environment {
    AWS_REGION = 'us-east-1'
    WORK_ROOT  = "${env.WORKSPACE}"            // base dir we can write to
    CONDA_DIR  = "${env.WORKSPACE}/miniconda"  // user-space Python
    LOCAL_BIN  = "${env.WORKSPACE}/.local/bin" // user-space bin for aws
    PATH       = "${env.LOCAL_BIN}:${env.CONDA_DIR}/bin:${env.PATH}"
  }

  stages {
    stage('Checkout') { steps { checkout scm } }

    stage('Setup Python (user-space Miniconda)') {
      steps {
        sh '''
          set -eu

          # Install Miniconda silently into ${CONDA_DIR} if not present
          if [ ! -x "${CONDA_DIR}/bin/python" ]; then
            mkdir -p "${WORK_ROOT}/_tmp"
            cd "${WORK_ROOT}/_tmp"
            curl -fsSL https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o miniconda.sh
            sh miniconda.sh -b -p "${CONDA_DIR}"
            rm -f miniconda.sh
          fi

          # Verify python is available
          "${CONDA_DIR}/bin/python" --version
          "${CONDA_DIR}/bin/pip" --version

          # Optional: ensure pip is up to date
          "${CONDA_DIR}/bin/python" -m pip install --upgrade pip
        '''
      }
    }

    stage('Setup AWS CLI v2 (user-space)') {
      steps {
        sh '''
          set -eu
          mkdir -p "${LOCAL_BIN}"

          if ! command -v aws >/dev/null 2>&1; then
            echo "Installing AWS CLI v2 into workspace..."
            mkdir -p "${WORK_ROOT}/_tmp"
            cd "${WORK_ROOT}/_tmp"
            curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o awscliv2.zip
            unzip -q -o awscliv2.zip
            ./aws/install -i "${WORK_ROOT}/.aws-cli" -b "${LOCAL_BIN}"
            rm -rf aws awscliv2.zip
          fi

          aws --version
        '''
      }
    }

    stage('Run All JSONs with AWS Credentials') {
  steps {
    sh(label: 'Revealv2 USPROD - Deployment', script: '''
      set -eu

      # --- Create a lean Python 3.11 env (avoids numpy build issues) ---
      CONDA_ENV="${WORK_ROOT}/py311"
      if [ ! -x "${CONDA_ENV}/bin/python" ]; then
        "${CONDA_DIR}/bin/conda" create -y -p "${CONDA_ENV}" python=3.11
      fi
      PY="${CONDA_ENV}/bin/python"
      PIP="${CONDA_ENV}/bin/pip"

      "$PY" --version
      "$PIP" --version

      # --- Assume role using AWS CLI v2 ---
      assume_role() {
        ROLE_ARN="$1"
        SESSION_NAME="$2"
        creds=$(aws sts assume-role \
          --role-arn "$ROLE_ARN" \
          --role-session-name "$SESSION_NAME" \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text)
        AWS_ACCESS_KEY_ID=$(echo "$creds" | awk '{print $1}')
        AWS_SECRET_ACCESS_KEY=$(echo "$creds" | awk '{print $2}')
        AWS_SESSION_TOKEN=$(echo "$creds" | awk '{print $3}')
        export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
      }
      assume_role "arn:aws:iam::889340682220:role/revealv2-tableau-usprod-deployment-role" "USPROD-Revealv2-Tableau-Jenkins-DeployRole"

      # --- Install only the minimal deps needed for the deploy ---
      # Prefer a small deploy file if you add one later; else install minimal set.
      if [ -f requirements-deploy.txt ]; then
        "$PIP" install --no-cache-dir --only-binary=:all: -r requirements-deploy.txt
      else
        "$PIP" install --no-cache-dir --only-binary=:all: boto3 pyyaml
      fi

      # --- Run your script with the py311 interpreter ---
      echo "Running deploy script..."
      "$PY" run_all_json_in_folder.py > output.log 2>&1 || true

      tail -n 100 output.log || true

      # Treat script-reported failures as build failures
      if grep -q "ModuleNotFoundError" output.log || grep -q "Failed on:" output.log; then
        echo "Detected failures in output.log"
        exit 1
      fi

      echo "Python script completed successfully"
    ''')
  }
}
  }

  post {
    always  { echo 'Pipeline finished.' }
    failure { echo 'Deployment failed!' }
  }
}
